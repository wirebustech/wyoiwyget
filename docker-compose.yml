version: '3.8'

services:
  # Frontend - Next.js Static Web App
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: builder
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_AI_SERVICE_URL=http://localhost:8001
      - NEXT_PUBLIC_AZURE_CLIENT_ID=your-dev-client-id
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
      - ai-services
    networks:
      - wyoiwyget-network
    profiles:
      - development

  # Backend - Node.js API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: builder
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - DATABASE_URL=postgresql://wyoiwyget:password@postgres:5432/wyoiwyget
      - REDIS_URL=redis://redis:6379
      - MONGODB_URL=mongodb://mongo:27017/wyoiwyget
      - STORAGE_CONNECTION_STRING=UseDevelopmentStorage=true
      - SEARCH_KEY=dev-search-key
      - JWT_SECRET=your-dev-jwt-secret
      - AZURE_CLIENT_ID=your-dev-client-id
      - AZURE_CLIENT_SECRET=your-dev-client-secret
      - AZURE_TENANT_ID=your-dev-tenant-id
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
      - mongo
    networks:
      - wyoiwyget-network
    profiles:
      - development

  # AI Services - Python FastAPI
  ai-services:
    build:
      context: .
      dockerfile: ai-services/Dockerfile
      target: builder
    ports:
      - "8001:8001"
    environment:
      - PYTHONPATH=/app
      - PORT=8001
      - DATABASE_URL=postgresql://wyoiwyget:password@postgres:5432/wyoiwyget
      - REDIS_URL=redis://redis:6379
      - STORAGE_CONNECTION_STRING=UseDevelopmentStorage=true
      - OPENAI_API_KEY=your-dev-openai-key
      - AZURE_CLIENT_ID=your-dev-client-id
      - AZURE_CLIENT_SECRET=your-dev-client-secret
      - AZURE_TENANT_ID=your-dev-tenant-id
    volumes:
      - ./ai-services:/app
    depends_on:
      - postgres
      - redis
    networks:
      - wyoiwyget-network
    profiles:
      - development

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=wyoiwyget
      - POSTGRES_USER=wyoiwyget
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma:/docker-entrypoint-initdb.d
    networks:
      - wyoiwyget-network
    profiles:
      - development

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wyoiwyget-network
    profiles:
      - development

  # MongoDB (Cosmos DB Emulator)
  mongo:
    image: mongo:7
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=wyoiwyget
    volumes:
      - mongo_data:/data/db
    networks:
      - wyoiwyget-network
    profiles:
      - development

  # Azure Storage Emulator
  azurite:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    ports:
      - "10000:10000"  # Blob service
      - "10001:10001"  # Queue service
      - "10002:10002"  # Table service
    volumes:
      - azurite_data:/data
    networks:
      - wyoiwyget-network
    profiles:
      - development

  # Elasticsearch (Cognitive Search Emulator)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - wyoiwyget-network
    profiles:
      - development

  # Nginx Reverse Proxy (Front Door Emulator)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - ai-services
    networks:
      - wyoiwyget-network
    profiles:
      - development

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - wyoiwyget-network
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - wyoiwyget-network
    profiles:
      - monitoring

  # Jaeger Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # HTTP collector
      - "14250:14250"  # gRPC collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - wyoiwyget-network
    profiles:
      - monitoring

  # Redis Commander (Redis UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - wyoiwyget-network
    profiles:
      - development

  # Mongo Express (MongoDB UI)
  mongo-express:
    image: mongo-express:latest
    ports:
      - "8082:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=password
    depends_on:
      - mongo
    networks:
      - wyoiwyget-network
    profiles:
      - development

  # Azure Storage Explorer (Web)
  storage-explorer:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    ports:
      - "10003:10000"
    volumes:
      - azurite_data:/data
    networks:
      - wyoiwyget-network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongo_data:
    driver: local
  azurite_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  wyoiwyget-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 