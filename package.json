{
  "name": "wyoiwyget",
  "version": "1.0.0",
  "description": "AI-powered e-commerce aggregator platform",
  "private": true,
  "workspaces": [
    "frontend",
    "backend"
  ],
  "scripts": {
    "install:all": "npm install && npm run install:frontend && npm run install:backend && npm run install:ai",
    "install:frontend": "cd frontend && npm install",
    "install:backend": "cd backend && npm install",
    "install:ai": "cd ai-services && python3 -m venv venv && source venv/bin/activate && pip install -r requirements.txt",
    
    "dev:all": "concurrently \"npm run dev:frontend\" \"npm run dev:backend\" \"npm run dev:ai\"",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && npm run dev",
    "dev:ai": "cd ai-services && source venv/bin/activate && python main.py",
    
    "build:all": "npm run build:frontend && npm run build:backend",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "cd backend && npm run build",
    
    "test:all": "npm run test:frontend && npm run test:backend && npm run test:ai && npm run test:integration",
    "test:frontend": "cd frontend && npm run test",
    "test:backend": "cd backend && npm run test",
    "test:ai": "cd ai-services && source venv/bin/activate && pytest",
    "test:integration": "npm run test:e2e && npm run test:load",
    "test:e2e": "playwright test",
    "test:load": "artillery run tests/load/load-test.yml",
    "test:performance": "npm run test:load && npm run test:performance:frontend",
    "test:performance:frontend": "cd frontend && npm run lighthouse",
    "test:watch": "concurrently \"npm run test:frontend -- --watch\" \"npm run test:backend -- --watch\"",
    "test:coverage": "npm run test:frontend -- --coverage && npm run test:backend -- --coverage",
    
    "lint:all": "npm run lint:frontend && npm run lint:backend && npm run lint:ai",
    "lint:frontend": "cd frontend && npm run lint",
    "lint:backend": "cd backend && npm run lint",
    "lint:ai": "cd ai-services && source venv/bin/activate && flake8 . && black --check .",
    
    "format:all": "npm run format:frontend && npm run format:backend && npm run format:ai",
    "format:frontend": "cd frontend && npm run format",
    "format:backend": "cd backend && npm run format",
    "format:ai": "cd ai-services && source venv/bin/activate && black . && isort .",
    
    "type-check:all": "npm run type-check:frontend && npm run type-check:backend",
    "type-check:frontend": "cd frontend && npm run type-check",
    "type-check:backend": "cd backend && npm run type-check",
    
    "db:setup": "cd backend && npm run db:setup",
    "db:migrate": "cd backend && npm run db:migrate",
    "db:seed": "cd backend && npm run db:seed",
    "db:reset": "cd backend && npm run db:reset",
    "db:backup": "cd backend && npm run db:backup",
    
    "logs:all": "docker-compose -f docker-compose.dev.yml logs -f",
    "logs:frontend": "docker-compose -f docker-compose.dev.yml logs -f frontend",
    "logs:backend": "docker-compose -f docker-compose.dev.yml logs -f backend",
    "logs:ai": "docker-compose -f docker-compose.dev.yml logs -f ai-services",
    
    "health:check": "curl -s http://localhost:3000/health && echo && curl -s http://localhost:8001/health && echo && curl -s http://localhost:3002 > /dev/null && echo 'Frontend: OK'",
    "monitor:all": "concurrently \"npm run monitor:frontend\" \"npm run monitor:backend\" \"npm run monitor:ai\"",
    "monitor:frontend": "cd frontend && npm run monitor",
    "monitor:backend": "cd backend && npm run monitor",
    "monitor:ai": "cd ai-services && source venv/bin/activate && python -m monitoring.main",
    
    "docker:build": "docker-compose -f docker-compose.dev.yml build",
    "docker:up": "docker-compose -f docker-compose.dev.yml up -d",
    "docker:down": "docker-compose -f docker-compose.dev.yml down",
    "docker:restart": "npm run docker:down && npm run docker:up",
    "docker:logs": "docker-compose -f docker-compose.dev.yml logs -f",
    "docker:clean": "docker system prune -a && docker volume prune",
    
    "deploy:production": "./scripts/deploy-production.sh",
    "deploy:staging": "./scripts/deploy-staging.sh",
    "deploy:local": "./scripts/deploy-local.sh",
    
    "security:audit": "npm audit && cd frontend && npm audit && cd ../backend && npm audit",
    "security:scan": "npm run security:audit && npm run security:dependency-check",
    "security:dependency-check": "cd backend && npm run security:check",
    
    "performance:analyze": "npm run performance:frontend && npm run performance:backend",
    "performance:frontend": "cd frontend && npm run lighthouse",
    "performance:backend": "cd backend && npm run performance:test",
    
    "docs:generate": "npm run docs:api && npm run docs:frontend",
    "docs:api": "cd backend && npm run docs:generate",
    "docs:frontend": "cd frontend && npm run docs:generate",
    "docs:serve": "cd docs && python3 -m http.server 8080",
    
    "clean:all": "npm run clean:frontend && npm run clean:backend && npm run clean:ai",
    "clean:frontend": "cd frontend && rm -rf .next node_modules",
    "clean:backend": "cd backend && rm -rf dist node_modules",
    "clean:ai": "cd ai-services && rm -rf __pycache__ .pytest_cache",
    
    "setup:dev": "chmod +x scripts/quick-start.sh && ./scripts/quick-start.sh",
    "setup:production": "./scripts/setup-production.sh",
    "setup:ci": "./scripts/setup-ci.sh",
    
    "ci:test": "npm run lint:all && npm run type-check:all && npm run test:all && npm run build:all",
    "ci:deploy": "npm run deploy:production",
    
    "release:patch": "npm version patch && git push && git push --tags",
    "release:minor": "npm version minor && git push && git push --tags",
    "release:major": "npm version major && git push && git push --tags",
    
    "backup:all": "npm run backup:database && npm run backup:files",
    "backup:database": "cd backend && npm run db:backup",
    "backup:files": "tar -czf backup-$(date +%Y%m%d-%H%M%S).tar.gz frontend/public backend/uploads",
    
    "restore:all": "npm run restore:database && npm run restore:files",
    "restore:database": "cd backend && npm run db:restore",
    "restore:files": "echo 'Please manually restore files from backup'",
    
    "maintenance:on": "cd backend && npm run maintenance:enable",
    "maintenance:off": "cd backend && npm run maintenance:disable",
    "maintenance:status": "cd backend && npm run maintenance:status",
    
    "ssl:generate": "./scripts/generate-ssl.sh",
    "ssl:renew": "./scripts/renew-ssl.sh",
    
    "monitoring:setup": "./scripts/setup-monitoring.sh",
    "monitoring:start": "./scripts/start-monitoring.sh",
    "monitoring:stop": "./scripts/stop-monitoring.sh",
    
    "backup:schedule": "crontab -e",
    "backup:list": "ls -la backups/",
    "backup:cleanup": "find backups/ -name '*.sql' -mtime +30 -delete",
    
    "update:dependencies": "npm update && cd frontend && npm update && cd ../backend && npm update",
    "update:security": "npm audit fix && cd frontend && npm audit fix && cd ../backend && npm audit fix",
    
    "start": "npm run dev:all",
    "stop": "npm run docker:down",
    "restart": "npm run stop && npm run start",
    "status": "npm run health:check"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "cross-env": "^7.0.3",
    "nodemon": "^3.0.2",
    "typescript": "^5.3.3",
    "@types/node": "^20.10.5",
    "eslint": "^8.56.0",
    "prettier": "^3.1.1",
    "husky": "^8.0.3",
    "lint-staged": "^15.2.0",
    "commitizen": "^4.3.0",
    "cz-conventional-changelog": "^3.3.0",
    "semantic-release": "^22.0.7",
    "@semantic-release/git": "^10.0.1",
    "@semantic-release/npm": "^10.0.4",
    "artillery": "^2.0.0-27",
    "playwright": "^1.40.1",
    "lighthouse": "^11.6.0",
    "jest": "^29.7.0",
    "supertest": "^6.3.3",
    "faker": "^6.6.6"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/wyoiwyget/wyoiwyget.git"
  },
  "keywords": [
    "e-commerce",
    "ai",
    "virtual-try-on",
    "avatar-generation",
    "azure",
    "nextjs",
    "express",
    "fastapi",
    "typescript",
    "python"
  ],
  "author": "Wyoiwyget Team",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/wyoiwyget/wyoiwyget/issues"
  },
  "homepage": "https://wyoiwyget.com",
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
    }
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md,yml,yaml}": [
      "prettier --write"
    ]
  }
} 